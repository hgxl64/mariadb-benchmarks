#!/bin/bash
#
# (w) Axel XL Schwenke for MariaDB

set -e
set -u
#set -x

. config.sh

USAGE="usage: $0

  mandatory arguments
    --scale N ........ run DBT3 with scale factor N
    --instance N ..... run database instance N

  optional arguments
    --timeout N ...... query execution timeout in seconds (default: 7200)
    --repeats N ...... query repetitions with restart inbetween (default: 1)
    --parallel ....... execute repetitions concurrently (disables restart)
    --engine S ....... use storage engine S to create the tables (default: InnoDB)
    --explain S ...... explain query (ex. --explain 'EXPLAIN EXTENDED', default: none)
    --analyzesql S ... load ANALYZE TABLE statements from given file
    --createsql S .... load CREATE TABLE statements from given file
    --loadsql S ...... load LOAD DATA statements from given file
    --indexsql S ..... load CREATE INDEX statements from given file
    --skipload ....... skip the loading stage, relying on contents of DATADIR
    --keepstats ...... keep statistics from previous runs
    --noexec ......... don't execute any query
"

COMMAND_LINE="$@"

while [[ $# > 0 ]]
do
    key="$1"; shift;
    case ${key} in
        --scale)      SCALE="$1"; shift
                      DIR=$(printf "SF%02d" $SCALE);
                      if [[ ! -d $DIR ]]
                      then
                        echo -e "--scale ${SCALE} ... ${DIR} does not exist!"
                        exit 1
                      fi
                      ;;

        --instance)   I="$1"; shift
                      II=$(printf "%02d" $I)
                      RESULTSDIR="res${II}"
                      test -e my.cnf.$II || { echo "my.cnf.$II does not exist!"; exit 1; }
                      test -e server.$II || { echo "server.$II does not exist!"; exit 1; }
                      ;;

        --timeout)    TIMEOUT="$1"; shift
                      ;;

        --repeats)    REPEATS="$1"; shift
                      ;;

        --parallel)   PARALLEL=TRUE
                      ;;

        --explain)    EXPLAIN="$1"; shift
                      ;;

        --noexec)     NOEXEC=TRUE
                      ;;

        --skipload)   SKIPLOAD=TRUE
                      ;;

        --keepstats)  KEEPSTATS=TRUE
                      ;;

        --force)      FORCE=TRUE
                      ;;

        --engine )    ENGINE="$1"; shift
                      ;;

        --createsql)  CREATESQL="$1"; shift
                      ;;

        --loadsql)    LOADSQL="$1"; shift
                      ;;

        --indexsql)   INDEXSQL="$1"; shift
                      ;;

        --analyzesql) ANALYZESQL="$1"; shift
                      ;;

        --logdir)     LOGDIR="$1"; shift
                      ;;

        -h|--help)    echo -e "$USAGE"
                      exit 1
                      ;;

        *)            echo "Invalid input switch: $key"
                      echo -e "$0 ${COMMAND_LINE}"
                      echo -e "$USAGE";
                      exit 1
                      ;;
    esac
done

# check mandatory options
[[ ${SCALE:-""} ]] || { echo -e "--scale option not set!"; echo -e "$USAGE"; exit 1; }
[[ ${I:-""} ]]     || { echo -e "--instance option not set!"; echo -e "$USAGE"; exit 1; }

# defaults
[[ ${TIMEOUT:-""}    ]] || TIMEOUT=7200
[[ ${REPEATS:-""}    ]] || REPEATS=1
[[ ${EXPLAIN:-""}    ]] || EXPLAIN=""
[[ ${ENGINE:-""}     ]] || ENGINE="InnoDB"
[[ ${NOEXEC:-""}     ]] || NOEXEC=FALSE
[[ ${SKIPLOAD:-""}   ]] || SKIPLOAD=FALSE
[[ ${PARALLEL:-""}   ]] || PARALLEL=FALSE
[[ ${KEEPSTATS:-""}  ]] || KEEPSTATS=FALSE
[[ ${FORCE:-""}      ]] || FORCE=FALSE

[[ ${ANALYZESQL:-""} ]] || ANALYZESQL="analyze_tables.sql"
[[ ${CREATESQL:-""}  ]] || CREATESQL="create_tables.sql"
[[ ${LOADSQL:-""}    ]] || LOADSQL="load_tables.sql"
[[ ${INDEXSQL:-""}   ]] || INDEXSQL="index_tables.sql"
[[ ${LOGDIR}:-""}    ]] || LOGDIR=${RESULTSDIR}/${DIR}

if [[ ${PARALLEL} == TRUE ]]
then
    PARALLEL=$REPEATS;
    REPEATS=1;
fi

HERE=$(pwd)

# work starts here

# exports for envsubst
export ENGINE
export DATAFILEDIR=${HERE}/${DIR}

[[ -d ${LOGDIR} && ${FORCE} != TRUE ]] && { echo "results exist in ${LOGDIR}, use --force to override this check"; exit 1; }
[[ -d ${LOGDIR} ]] || mkdir -p ${LOGDIR}


# initially start the server
if [[ ${SKIPLOAD} == TRUE ]]
then
    echo "skip loading the server, using existing DATADIR"
else
    read ss <server.$II
    echo -n "starting MySQL server ($ss) initially ..."
    ./run.mysqld $II initial >> ${RESULTSDIR}/run.mysqld.log 2>&1 &
    runner=$!
    echo " (pid=$runner)"

    timeo=99
    echo -n "waiting for server to come up "
    while [ $timeo -gt 0 ]
    do
        mysqladmin -S ${SOCKET} -u root -b -s ping && break
        echo -n "."
        timeo=$(($timeo - 1))
        sleep 1
    done

    if [ $timeo -eq 0 ]
    then
        echo " server not starting! Abort!"
        exit 2
    fi

    # create the tables
    echo "Creating Tables using '${CREATESQL}' ..."
    LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_load.log
    CMD=$(echo "DROP DATABASE IF EXISTS dbt3;
    CREATE DATABASE dbt3;
    USE dbt3;

    CREATE TABLE load_time_statistics (
            idx INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            task_name VARCHAR(40),
            timest TIMESTAMP(6)
    );

    CREATE TABLE dbt3_runs (
      idx      INT UNSIGNED AUTO_INCREMENT PRIMARY KEY,
      query    CHAR(5),
      pass     TINYINT UNSIGNED,
      start_ts TIMESTAMP(6),
      end_ts   TIMESTAMP(6)
    );

    "; envsubst < ${CREATESQL})
    mysql -vnt -S ${SOCKET} -u root -e "$CMD" 2>&1 | tee --append $LOG

    # load the tables
    echo "Loading Tables using '${LOADSQL}' ..."
    CMD=$(envsubst < ${LOADSQL})
    mysql -nt -S ${SOCKET} -u root -e "$CMD" dbt3 2>&1 | tee --append $LOG

    # add indexes
    echo "Creating Indexes using '${INDEXSQL}' ..."
    CMD=$(envsubst < ${INDEXSQL})
    mysql -nt -S ${SOCKET} -u root -e "$CMD" dbt3 2>&1 | tee --append $LOG

    # generate load time statistics
    LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_load.stats
    mysql -t -S ${SOCKET} -u root -e "
    SELECT @start:=MIN(timest) FROM load_time_statistics;
    SELECT UNIX_TIMESTAMP(timest)-UNIX_TIMESTAMP(@start) AS duration,
    @start:=timest AS time, task_name
    FROM load_time_statistics ORDER BY idx;
    SELECT version()
    " dbt3 2>&1 | tee --append $LOG

    # shutdown server
    echo -n "stopping MySQL server ... "
    mysqladmin -S ${SOCKET} -u root shutdown
    wait $runner

fi

for RUN in $(seq $REPEATS)
do

    # start the server
    echo -n "restarting MySQL server for run ${RUN} ..."
    ./run.mysqld $II >> ${RESULTSDIR}/run.mysqld.log 2>&1 &
    runner=$!
    echo " (pid=$runner)"

    timeo=29
    echo -n "waiting for server to come up "
    while [ $timeo -gt 0 ]
    do
        mysqladmin -S ${SOCKET} -u root -b -s ping && break
        echo -n "."
        timeo=$(($timeo - 1))
        sleep 1
    done

    if [ $timeo -eq 0 ]
    then
        echo " server not starting! Abort!"
        exit 2
    fi

    # run analyze tables
    echo "Analyzing Tables using '${ANALYZESQL}' ..."
    LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_analyze.log
    CMD=$(envsubst < ${ANALYZESQL}; echo "
    SELECT @start:=MIN(timest) FROM load_time_statistics;
    SELECT UNIX_TIMESTAMP(timest)-UNIX_TIMESTAMP(@start) AS duration,
    @start:=timest AS time, task_name
    FROM load_time_statistics ORDER BY idx;

    SHOW TABLE STATUS;
    SHOW GLOBAL VARIABLES;")
    mysql -nt -S ${SOCKET} -u root -e "$CMD" dbt3 2>&1 | tee --append $LOG

    # clean stats tables on first run
    if [[ ${KEEPSTATS} == FALSE ]] && [[ ${RUN} -eq 1 ]]
    then
        mysql -nt -S ${SOCKET} -u root -e "DELETE FROM dbt3_runs" dbt3 2>&1 | tee --append $LOG
    fi

    # execute DBT3 queries
    if [[ ${PARALLEL} == FALSE ]]
    then
        LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_exec.log
        for QUERY in ${DIR}/query_*.sql
        do
            Q1=$(basename $QUERY)
            Q2=${Q1%%.sql}
            QNUM=${Q2##query_}

            # explain query
            if [[ ${EXPLAIN} != "" ]]
            then
                EXP=$(cat ${DIR}/explain_${QNUM}.sql | sed "s/EXPLAIN/${EXPLAIN}/")
                timeout ${TIMEOUT} mysql -nt -S ${SOCKET} -u root -e "${EXP}" dbt3 | 2>&1 tee --append ${LOGDIR}/${Q2}.explains
            fi

            # run query
            if [[ ${NOEXEC} != TRUE ]]
            then
                CMD=$(echo "SELECT 'running query ${Q2}' AS progress;"; echo "SET @start:=NOW(6);"; cat $QUERY;
                  echo "INSERT INTO dbt3_runs (query, pass, start_ts, end_ts) VALUES ('${QNUM}', ${RUN}, @start, NOW(6));")
                timeout ${TIMEOUT} mysql -vvvnt -S ${SOCKET} -u root -e "${CMD}" dbt3 | 2>&1 tee --append $LOG
            fi
        done
    else
        # parallel query execution
        for QUERY in ${DIR}/query_*.sql
        do
            Q1=$(basename $QUERY)
            Q2=${Q1%%.sql}
            QNUM=${Q2##query_}

            # explain query only once
            if [[ ${EXPLAIN} != "" ]]
            then
                EXP=$(cat ${DIR}/explain_${QNUM}.sql | sed "s/EXPLAIN/${EXPLAIN}/")
                timeout ${TIMEOUT} mysql -nt -S ${SOCKET} -u root -e "${EXP}" dbt3 | 2>&1 tee --append ${LOGDIR}/${Q2}.explains
            fi

            # run query
            if [[ ${NOEXEC} != TRUE ]]
            then
                PIDLIST=""
                for THD in $(seq $PARALLEL)
                do
                    LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_exec.${THD}.log
                    CMD=$(echo "SELECT 'running query ${Q2}' AS progress;"; echo "SET @start:=NOW(6);"; cat $QUERY;
                        echo "INSERT INTO dbt3_runs (query, pass, start_ts, end_ts) VALUES ('${QNUM}', ${THD}, @start, NOW(6));")
                    timeout ${TIMEOUT} mysql -vvvnt -S ${SOCKET} -u root -e "${CMD}" dbt3 | 2>&1 tee --append $LOG &

                    if [[ -z $PIDLIST ]]
                    then
                        PIDLIST=$!
                    else
                        PIDLIST="$PIDLIST $!"
                   fi

                done
                echo "waiting for query processes to finish (${PIDLIST})"
                wait $PIDLIST
            fi
        done

    fi

    # generate exec time statistics on last run
    if [[ $RUN == $REPEATS ]]
    then
        LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_exec.long.stats
        mysql -t -S ${SOCKET} -u root -e "\
	SELECT query, pass, UNIX_TIMESTAMP(end_ts)-UNIX_TIMESTAMP(start_ts) AS duration
	FROM dbt3_runs ORDER BY query, pass;

	SELECT query, COUNT(*) FROM dbt3_runs GROUP BY query;

	SELECT query,
          min(duration) as min,
          max(duration) as max,
          avg(duration) as avg,
          std(duration) as sigma,
          std(duration)/avg(duration)*100 as 'sigma/avg %'
        FROM (
          SELECT query, UNIX_TIMESTAMP(end_ts)-UNIX_TIMESTAMP(start_ts) AS duration FROM dbt3_runs
        ) xxx
        GROUP BY query;
        " dbt3 2>&1 | tee --append $LOG

        LOG=${LOGDIR}/$(date +%y%m%d.%H%M%S).dbt3_exec.stats

        mysql -t -S ${SOCKET} -u root -e "\
	SELECT query, avg(duration) as average_execution_time
        FROM (
          SELECT query, UNIX_TIMESTAMP(end_ts)-UNIX_TIMESTAMP(start_ts) AS duration FROM dbt3_runs
        ) xxx
        GROUP BY query;
        " dbt3 2>&1 | tee --append $LOG
    fi

    # finally shutdown server
    echo "stopping MySQL server ... "
    mysqladmin -S ${SOCKET} -u root shutdown
    wait $runner

done

