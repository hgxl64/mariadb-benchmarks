#!/bin/bash
set -e
set -u
#set -x
#ulimit -n 8000

. config.sh

#setup
ROWS=$(($TOTAL_ROWS / $TABLES))
if [ "${CPU_MASK_SYSBENCH}" != "" ]
then
  NUMACTL="numactl --interleave=all --physcpubind=${CPU_MASK_SYSBENCH}"
else
  NUMACTL="numactl --interleave=all"
fi
lc_engine=`echo $ENGINE | tr [:upper:] [:lower:]`  

#force InnoDB checkpoint and wait for completion
function waitm {
if [ $lc_engine = "innodb" ]
then
  wt_old=0
  repeat=5
  mdp=`mysql -S $SOCKET -u root -e "SHOW GLOBAL VARIABLES LIKE 'innodb_max_dirty_pages_pct'" | tail -1 | cut -f 2`
  mysql -S $SOCKET -u root -e "SET GLOBAL innodb_max_dirty_pages_pct=0"
  echo -n "dirty pages:"
  while true
  do
    wt=`mysql -S $SOCKET -u root -e "SHOW GLOBAL STATUS LIKE 'innodb_buffer_pool_pages_dirty'" | tail -1 | cut -f 2`
    echo -n " $wt"
    if [[ "$wt" -lt 100 ]] || [[ "$repeat" -le 0 ]] 
    then
      break
    fi
    if [[ "$wt" -eq "$wt_old" ]]
    then
      echo -n "($repeat)"
      repeat=$(($repeat - 1))
    fi
    wt_old=$wt
    sleep 10
  done
  echo 
  mysql -S $SOCKET -u root -e "SET GLOBAL innodb_max_dirty_pages_pct=$mdp"
fi
if [ $lc_engine = "tokudb" ]
then
  date "+[%c] forcing tokudb checkpoint via FLUSH LOGS"
  mysql -S $SOCKET -u root -e "FLUSH LOGS"
  date "+[%c] checkpoint finished"
fi
}


#determine run number for selecting an output directory
RUN_NUMBER=${1:?"run number not given!"}

OUTDIR=`printf "res%02d" $RUN_NUMBER`
mkdir -p $OUTDIR


#prepare database
if [ "$CREATEDB" != "0" ]
then

  #create sbtest database
  mysql -S $SOCKET -u root -e "DROP DATABASE IF EXISTS sbtest"
  mysql -S $SOCKET -u root -e "CREATE DATABASE sbtest"

  #create and fill oltp table(s)
  if [ $TABLES -gt 1 ]
  then
    $SYSBENCH --test=lua/parallel_prepare.lua --oltp_tables_count=$TABLES --oltp-table-size=$ROWS --num-threads=$TABLES --mysql-table-engine=$ENGINE --mysql-socket=$SOCKET --mysql-user=root run
  else
    $SYSBENCH --test=lua/oltp.lua --oltp_tables_count=$TABLES --oltp-table-size=$ROWS --num-threads=1 --mysql-table-engine=$ENGINE --mysql-socket=$SOCKET --mysql-user=root prepare
  fi

  #force checkpoint and wait for completion
  waitm

else

if [ $lc_engine = "innodb" ]
then
  #warmup buffer pool
  echo -n "warmup ... "
  PIDLIST=""
  for i in `seq $TABLES` ; do
    (time mysql -S $SOCKET -u root -e "SELECT AVG(id) FROM sbtest$i FORCE KEY (PRIMARY)" sbtest) > /dev/null 2>&1   &
    PIDLIST="$PIDLIST $!"
  done
  wait $PIDLIST
  echo "done"
  sleep 2
fi

fi


#run the benchmark
for thread in $THREADS
do
  if [ $RUNTIME_RO -gt 0 ]
  then
    $NUMACTL iostat -mx $REPORT $(($RUNTIME_RO/$REPORT+1))  >> $OUTDIR/iostat.ro.$thread.res &
    PIDLIST=$!
    $NUMACTL ./dump_pfs.sh >> $OUTDIR/mutexes.ro.$thread.res &
    PIDLIST="$PIDLIST $!"

    $NUMACTL $SYSBENCH --test=lua/oltp.lua --oltp_tables_count=$TABLES --oltp-table-size=$ROWS --rand-seed=42 --rand-type=uniform --num-threads=$thread --oltp-read-only=on --report-interval=$REPORT --mysql-socket=$SOCKET --max-time=$RUNTIME_RO --max-requests=0 --mysql-user=root --percentile=99 run | tee -a $OUTDIR/sysbench.ro.$thread.res

    sleep 2
    wait $PIDLIST
  fi

  if [ $RUNTIME_RW -gt 0 ]
  then
    $NUMACTL iostat -mx $REPORT $(($RUNTIME_RW/$REPORT+1))  >> $OUTDIR/iostat.rw.$thread.res &
    PIDLIST=$!
    $NUMACTL ./dump_pfs.sh >> $OUTDIR/mutexes.rw.$thread.res &
    PIDLIST="$PIDLIST $!"

    $NUMACTL $SYSBENCH --test=lua/oltp.lua --oltp_tables_count=$TABLES --oltp-table-size=$ROWS --rand-seed=42 --rand-type=uniform --num-threads=$thread --oltp-read-only=off --report-interval=$REPORT --mysql-socket=$SOCKET --max-time=$RUNTIME_RW --max-requests=0 --mysql-user=root --percentile=99 run | tee -a $OUTDIR/sysbench.rw.$thread.res

    wait $PIDLIST
    waitm
  fi
  sleep 2

done
